// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: chirps.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createChirp = `-- name: CreateChirp :one
INSERT INTO chirps (body, user_id)
VALUES ($1, $2)
RETURNING id, body, user_id, created_at, updated_at
`

type CreateChirpParams struct {
	Body   string
	UserID uuid.UUID
}

func (q *Queries) CreateChirp(ctx context.Context, arg CreateChirpParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, createChirp, arg.Body, arg.UserID)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteChirp = `-- name: DeleteChirp :one
DELETE FROM chirps WHERE id = $1 RETURNING id
`

func (q *Queries) DeleteChirp(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, deleteChirp, id)
	err := row.Scan(&id)
	return id, err
}

const deleteChirps = `-- name: DeleteChirps :exec
DELETE FROM chirps
`

func (q *Queries) DeleteChirps(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteChirps)
	return err
}

const getChirp = `-- name: GetChirp :one
SELECT id, body, user_id, created_at, updated_at FROM chirps WHERE id = $1
`

func (q *Queries) GetChirp(ctx context.Context, id uuid.UUID) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, getChirp, id)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChirps = `-- name: GetChirps :many
SELECT id, body, user_id, created_at, updated_at FROM chirps
WHERE
    $3::TEXT is NULL OR $3::TEXT = user_id::TEXT
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type GetChirpsParams struct {
	Limit  int32
	Offset int32
	UserId sql.NullString
}

func (q *Queries) GetChirps(ctx context.Context, arg GetChirpsParams) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getChirps, arg.Limit, arg.Offset, arg.UserId)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const totalChirps = `-- name: TotalChirps :one
SELECT COUNT(*) FROM chirps
WHERE $1::TEXT is NULL OR $1::TEXT = user_id::TEXT
`

func (q *Queries) TotalChirps(ctx context.Context, userid sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, totalChirps, userid)
	var count int64
	err := row.Scan(&count)
	return count, err
}
